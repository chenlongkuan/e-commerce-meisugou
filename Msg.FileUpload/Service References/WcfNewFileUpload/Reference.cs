//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Msg.FileUpload.WcfNewFileUpload {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfNewFileUpload.INewFileUpload")]
    public interface INewFileUpload {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/SaveSmailImage", ReplyAction="http://tempuri.org/INewFileUpload/SaveSmailImageResponse")]
        WCF.Lib.File.Entity.NewMessage SaveSmailImage(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/SaveSmailImage", ReplyAction="http://tempuri.org/INewFileUpload/SaveSmailImageResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> SaveSmailImageAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/SaveSmailImageByQuality", ReplyAction="http://tempuri.org/INewFileUpload/SaveSmailImageByQualityResponse")]
        WCF.Lib.File.Entity.NewMessage SaveSmailImageByQuality(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int quality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/SaveSmailImageByQuality", ReplyAction="http://tempuri.org/INewFileUpload/SaveSmailImageByQualityResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> SaveSmailImageByQualityAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int quality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByHeightAndWidth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByHeightAndWidthResponse" +
            "")]
        WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByHeightAndWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByHeightAndWidth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByHeightAndWidthResponse" +
            "")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByHeightAndWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageNoFillWidthByHeightAndWi" +
            "dth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageNoFillWidthByHeightAndWi" +
            "dthResponse")]
        WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageNoFillWidthByHeightAndWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageNoFillWidthByHeightAndWi" +
            "dth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageNoFillWidthByHeightAndWi" +
            "dthResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageNoFillWidthByHeightAndWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidthRe" +
            "sponse")]
        WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByMaxHeightAndMaxWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidthRe" +
            "sponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByMaxHeightAndMaxWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidth_T" +
            "uan", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidth_T" +
            "uanResponse")]
        WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByMaxHeightAndMaxWidth_Tuan(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidth_T" +
            "uan", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxHeightAndMaxWidth_T" +
            "uanResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByMaxHeightAndMaxWidth_TuanAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxWidth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxWidthResponse")]
        WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByMaxWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxWidth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxWidth", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSmailImageByMaxWidthResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByMaxWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxWidth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSquareImage", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSquareImageResponse")]
        WCF.Lib.File.Entity.NewMessage UploadAndMakeSquareImage(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int width, int height);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadAndMakeSquareImage", ReplyAction="http://tempuri.org/INewFileUpload/UploadAndMakeSquareImageResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSquareImageAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int width, int height);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadFile", ReplyAction="http://tempuri.org/INewFileUpload/UploadFileResponse")]
        WCF.Lib.File.Entity.NewMessage UploadFile(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadFile", ReplyAction="http://tempuri.org/INewFileUpload/UploadFileResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadFileAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadFileByOriginal", ReplyAction="http://tempuri.org/INewFileUpload/UploadFileByOriginalResponse")]
        WCF.Lib.File.Entity.NewMessage UploadFileByOriginal(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, bool saveSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadFileByOriginal", ReplyAction="http://tempuri.org/INewFileUpload/UploadFileByOriginalResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadFileByOriginalAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, bool saveSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadFile_Tuan", ReplyAction="http://tempuri.org/INewFileUpload/UploadFile_TuanResponse")]
        WCF.Lib.File.Entity.NewMessage UploadFile_Tuan(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/UploadFile_Tuan", ReplyAction="http://tempuri.org/INewFileUpload/UploadFile_TuanResponse")]
        System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadFile_TuanAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/SaveSchoolLogo", ReplyAction="http://tempuri.org/INewFileUpload/SaveSchoolLogoResponse")]
        bool SaveSchoolLogo(int schoolId, byte[] buff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/SaveSchoolLogo", ReplyAction="http://tempuri.org/INewFileUpload/SaveSchoolLogoResponse")]
        System.Threading.Tasks.Task<bool> SaveSchoolLogoAsync(int schoolId, byte[] buff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/GetMaxImgWidthSrcAndMaxHeight", ReplyAction="http://tempuri.org/INewFileUpload/GetMaxImgWidthSrcAndMaxHeightResponse")]
        int GetMaxImgWidthSrcAndMaxHeight(WCF.Lib.File.Entity.RecordImgMsg record);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewFileUpload/GetMaxImgWidthSrcAndMaxHeight", ReplyAction="http://tempuri.org/INewFileUpload/GetMaxImgWidthSrcAndMaxHeightResponse")]
        System.Threading.Tasks.Task<int> GetMaxImgWidthSrcAndMaxHeightAsync(WCF.Lib.File.Entity.RecordImgMsg record);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewFileUploadChannel : Msg.FileUpload.WcfNewFileUpload.INewFileUpload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewFileUploadClient : System.ServiceModel.ClientBase<Msg.FileUpload.WcfNewFileUpload.INewFileUpload>, Msg.FileUpload.WcfNewFileUpload.INewFileUpload {
        
        public NewFileUploadClient() {
        }
        
        public NewFileUploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewFileUploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewFileUploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewFileUploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCF.Lib.File.Entity.NewMessage SaveSmailImage(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen) {
            return base.Channel.SaveSmailImage(attachmen);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> SaveSmailImageAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen) {
            return base.Channel.SaveSmailImageAsync(attachmen);
        }
        
        public WCF.Lib.File.Entity.NewMessage SaveSmailImageByQuality(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int quality) {
            return base.Channel.SaveSmailImageByQuality(attachmen, quality);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> SaveSmailImageByQualityAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int quality) {
            return base.Channel.SaveSmailImageByQualityAsync(attachmen, quality);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByHeightAndWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width) {
            return base.Channel.UploadAndMakeSmailImageByHeightAndWidth(attachmen, Height, Width);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByHeightAndWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width) {
            return base.Channel.UploadAndMakeSmailImageByHeightAndWidthAsync(attachmen, Height, Width);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageNoFillWidthByHeightAndWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width) {
            return base.Channel.UploadAndMakeSmailImageNoFillWidthByHeightAndWidth(attachmen, Height, Width);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageNoFillWidthByHeightAndWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int Height, int Width) {
            return base.Channel.UploadAndMakeSmailImageNoFillWidthByHeightAndWidthAsync(attachmen, Height, Width);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByMaxHeightAndMaxWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth) {
            return base.Channel.UploadAndMakeSmailImageByMaxHeightAndMaxWidth(attachmen, maxHeight, maxWidth);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByMaxHeightAndMaxWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth) {
            return base.Channel.UploadAndMakeSmailImageByMaxHeightAndMaxWidthAsync(attachmen, maxHeight, maxWidth);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByMaxHeightAndMaxWidth_Tuan(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth) {
            return base.Channel.UploadAndMakeSmailImageByMaxHeightAndMaxWidth_Tuan(attachmen, maxHeight, maxWidth);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByMaxHeightAndMaxWidth_TuanAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxHeight, int maxWidth) {
            return base.Channel.UploadAndMakeSmailImageByMaxHeightAndMaxWidth_TuanAsync(attachmen, maxHeight, maxWidth);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadAndMakeSmailImageByMaxWidth(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxWidth) {
            return base.Channel.UploadAndMakeSmailImageByMaxWidth(attachmen, maxWidth);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSmailImageByMaxWidthAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int maxWidth) {
            return base.Channel.UploadAndMakeSmailImageByMaxWidthAsync(attachmen, maxWidth);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadAndMakeSquareImage(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int width, int height) {
            return base.Channel.UploadAndMakeSquareImage(attachmen, width, height);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadAndMakeSquareImageAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, int width, int height) {
            return base.Channel.UploadAndMakeSquareImageAsync(attachmen, width, height);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadFile(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen) {
            return base.Channel.UploadFile(attachmen);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadFileAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen) {
            return base.Channel.UploadFileAsync(attachmen);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadFileByOriginal(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, bool saveSource) {
            return base.Channel.UploadFileByOriginal(attachmen, saveSource);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadFileByOriginalAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen, bool saveSource) {
            return base.Channel.UploadFileByOriginalAsync(attachmen, saveSource);
        }
        
        public WCF.Lib.File.Entity.NewMessage UploadFile_Tuan(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen) {
            return base.Channel.UploadFile_Tuan(attachmen);
        }
        
        public System.Threading.Tasks.Task<WCF.Lib.File.Entity.NewMessage> UploadFile_TuanAsync(WCF.Lib.File.Entity.NewAttachmentsEntity attachmen) {
            return base.Channel.UploadFile_TuanAsync(attachmen);
        }
        
        public bool SaveSchoolLogo(int schoolId, byte[] buff) {
            return base.Channel.SaveSchoolLogo(schoolId, buff);
        }
        
        public System.Threading.Tasks.Task<bool> SaveSchoolLogoAsync(int schoolId, byte[] buff) {
            return base.Channel.SaveSchoolLogoAsync(schoolId, buff);
        }
        
        public int GetMaxImgWidthSrcAndMaxHeight(WCF.Lib.File.Entity.RecordImgMsg record) {
            return base.Channel.GetMaxImgWidthSrcAndMaxHeight(record);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxImgWidthSrcAndMaxHeightAsync(WCF.Lib.File.Entity.RecordImgMsg record) {
            return base.Channel.GetMaxImgWidthSrcAndMaxHeightAsync(record);
        }
    }
}
